"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDefs = void 0;
var apollo_server_1 = require("apollo-server");
exports.typeDefs = (0, apollo_server_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    type Query {\n        posts: [Post!]!\n        post(postId: ID!): Post!\n        me: MePayload\n        profile(userId: ID!): Profile\n    }\n\n    type Mutation {\n        postCreate(post: PostInput!): PostPayload!\n        postUpdate(postId: ID!, post: PostInput): PostPayload!\n        postDelete(postId: ID!): PostPayload\n        postPublish(postId: ID!): PostPayload\n        signUp(user: SignUpInput!): UserPayload!\n        signIn(user: SignInInput!): UserPayload!\n    }\n\n    type Post {\n        id:         ID!\n        title:      String!\n        content:    String!\n        published:  Boolean!\n        createdAt:  String!     \n        user:       User\n    }\n\n    type User {\n        id:         ID!\n        email:      String!   \n        name:       String!\n        password:   String!\n        createdAt:  String!   \n        profile:    Profile!\n        posts:      [Post!]!\n    }\n\n    type Profile {\n        id:         ID!\n        bio:        String!\n        isMyProfile:Boolean!\n        user:       User!\n    }\n\n    type UserError {\n        message:    String!\n    }\n\n    type PostPayload {\n        userErrors: [UserError!]!\n        post:        Post\n    }\n\n    type UserPayload {\n        userErrors: [UserError!]!\n        token: String\n    }\n\n    type MePayload {\n        userErrors: [UserError!]!\n        user:       User\n    }\n\n    input SignUpInput {\n        name:       String!\n        email:      String!   \n        password:   String!\n        bio:        String!\n    }\n\n    input SignInInput {\n        email:      String!\n        password:   String!\n    }\n\n    input PostInput {\n        title: String\n        content: String\n    }\n"], ["\n    type Query {\n        posts: [Post!]!\n        post(postId: ID!): Post!\n        me: MePayload\n        profile(userId: ID!): Profile\n    }\n\n    type Mutation {\n        postCreate(post: PostInput!): PostPayload!\n        postUpdate(postId: ID!, post: PostInput): PostPayload!\n        postDelete(postId: ID!): PostPayload\n        postPublish(postId: ID!): PostPayload\n        signUp(user: SignUpInput!): UserPayload!\n        signIn(user: SignInInput!): UserPayload!\n    }\n\n    type Post {\n        id:         ID!\n        title:      String!\n        content:    String!\n        published:  Boolean!\n        createdAt:  String!     \n        user:       User\n    }\n\n    type User {\n        id:         ID!\n        email:      String!   \n        name:       String!\n        password:   String!\n        createdAt:  String!   \n        profile:    Profile!\n        posts:      [Post!]!\n    }\n\n    type Profile {\n        id:         ID!\n        bio:        String!\n        isMyProfile:Boolean!\n        user:       User!\n    }\n\n    type UserError {\n        message:    String!\n    }\n\n    type PostPayload {\n        userErrors: [UserError!]!\n        post:        Post\n    }\n\n    type UserPayload {\n        userErrors: [UserError!]!\n        token: String\n    }\n\n    type MePayload {\n        userErrors: [UserError!]!\n        user:       User\n    }\n\n    input SignUpInput {\n        name:       String!\n        email:      String!   \n        password:   String!\n        bio:        String!\n    }\n\n    input SignInInput {\n        email:      String!\n        password:   String!\n    }\n\n    input PostInput {\n        title: String\n        content: String\n    }\n"])));
var templateObject_1;
